name: main

on:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:

jobs:
  build-matrix:
    name: Matrix
    uses: metanorma/ci/.github/workflows/build-sample-matrix.yml@main
    with:
      smoke: false
      flavors-only: true
      public-only: true

  get-architectures:
    name: Get snap architectures
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.get-architectures.outputs.architectures }}
    steps:
      - uses: actions/checkout@v4
      - name: Get snap architectures
        id: get-architectures
        uses: snapcrafters/ci/get-architectures@main

  build:
    name: Build snap
    needs: [get-architectures]
    runs-on: ${{ matrix.architecture == 'arm64' && 'ubuntu-latest-arm64' || 'ubuntu-latest' }}
    strategy:
      matrix:
        architecture: ${{ fromJSON(needs.get-architectures.outputs.architectures) }}
    steps:
      - uses: actions/checkout@v4
      - name: Build snap for ${{ matrix.architecture }}
        id: snapcraft
        uses: snapcore/action-build@v1
      - uses: actions/upload-artifact@v4
        with:
          name: metanorma-snap-${{ matrix.architecture }}
          path: ${{ steps.snapcraft.outputs.snap }}
          retention-days: 5

  build-test-matrix:
    name: Build test matrix
    needs: [build-matrix, get-architectures]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - name: Build test matrix
        id: build-matrix
        uses: actions/github-script@v7
        with:
          script: |
            const architectures = ${{ needs.get-architectures.outputs.architectures }};
            const samplesMatrix = ${{ needs.build-matrix.outputs.samples-matrix }};

            const matrix = {
              include: []
            };

            for (const arch of architectures) {
              for (const flavor of samplesMatrix.include) {
                matrix.include.push({
                  architecture: arch,
                  id: flavor.id,
                  experimental: flavor.experimental
                });
              }
            }

            console.log('Generated matrix:', JSON.stringify(matrix, null, 2));
            core.setOutput('matrix', JSON.stringify(matrix));

  test:
    name: Test ${{ matrix.architecture }} - ${{ matrix.id }}
    needs: [build, build-test-matrix]
    runs-on: ${{ matrix.architecture == 'arm64' && 'ubuntu-latest-arm64' || 'ubuntu-latest' }}

    concurrency:
      group: '${{ github.workflow }}-${{ github.job }}-${{ matrix.architecture }}-${{ matrix.id }}-${{ github.head_ref || github.ref_name }}'
      cancel-in-progress: true

    continue-on-error: ${{ matrix.experimental }}
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix: ${{ fromJson(needs.build-test-matrix.outputs.matrix) }}

    steps:
      - run: sudo apt update && sudo apt install -y snapd

      - uses: actions/download-artifact@v4
        with:
          name: metanorma-snap-${{ matrix.architecture }}
          path: ./snap

      - run: |
          sudo snap install snap/*.snap --devmode
          sudo snap connect metanorma:home :home

      - name: Fetch samples (${{ matrix.id }})
        uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: metanorma/mn-samples-${{ matrix.id }}
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
          fetch-depth: 1

      - uses: actions-mn/site-gen@v2
        with:
          agree-to-terms: true

  publish:
    name: Publish snap
    needs: [build, test]
    runs-on: ${{ matrix.architecture == 'arm64' && 'ubuntu-latest-arm64' || 'ubuntu-latest' }}
    strategy:
      matrix:
        architecture: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: metanorma-snap-${{ matrix.architecture }}
          path: ./snap

      # Publish to edge and beta for main branch
      - name: Publish ${{ matrix.architecture }} to edge and beta
        if: github.ref == 'refs/heads/main'
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
        with:
          store_login: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
          snap: snap/*.snap
          release: edge,beta

      # Publish to beta and candidate for tags
      - name: Publish ${{ matrix.architecture }} to beta and candidate
        if: startsWith(github.ref, 'refs/tags/v')
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
        with:
          store_login: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
          snap: snap/*.snap
          release: beta,candidate

  promote-to-stable:
    if: startsWith(github.ref, 'refs/tags/v') && !endsWith(github.ref, 'pre')
    name: Promote to stable
    needs: [publish]
    uses: ./.github/workflows/promote-to-stable.yml
    secrets:
      METANORMA_SNAPCRAFT_TOKEN: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
