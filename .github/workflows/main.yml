name: main

on:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:

jobs:
  build-matrix:
    name: Matrix
    uses: metanorma/ci/.github/workflows/build-sample-matrix.yml@main
    with:
      smoke: false
      flavors-only: true
      public-only: true

  get-architectures:
    name: Get snap architectures
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.get-architectures.outputs.architectures }}
    steps:
      - uses: actions/checkout@v4
      - name: Get snap architectures
        id: get-architectures
        run: |
          # Extract architectures from snapcraft.yaml (handle both old architectures and new platforms format)
          if yq eval '.platforms' snap/snapcraft.yaml >/dev/null 2>&1 && [ "$(yq eval '.platforms' snap/snapcraft.yaml)" != "null" ]; then
            # New format: platforms
            architectures=$(yq eval '.platforms | keys' snap/snapcraft.yaml -o json | jq -c '.')
          else
            # Old format: architectures
            architectures=$(yq eval '.architectures[].build-on' snap/snapcraft.yaml | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "architectures=$architectures" >> $GITHUB_OUTPUT
          echo "Found architectures: $architectures"

  build:
    name: Build snap
    needs: [get-architectures]
    runs-on: ${{ matrix.architecture == 'arm64' && 'ubuntu-latest-arm64' || 'ubuntu-latest' }}
    strategy:
      matrix:
        architecture: ${{ fromJSON(needs.get-architectures.outputs.architectures) }}
    steps:
      - uses: actions/checkout@v4
      - name: Debug environment
        run: |
          echo "Architecture: ${{ matrix.architecture }}"
          echo "SNAPCRAFT_TARGET_ARCH: $SNAPCRAFT_TARGET_ARCH"
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner arch: ${{ runner.arch }}"
          ls -la snap/
          cat snap/snapcraft.yaml
      - name: Build snap for ${{ matrix.architecture }}
        id: snapcraft
        uses: snapcore/action-build@v1
        env:
          SNAPCRAFT_TARGET_ARCH: ${{ matrix.architecture }}
      - uses: actions/upload-artifact@v4
        with:
          name: metanorma-snap-${{ matrix.architecture }}
          path: ${{ steps.snapcraft.outputs.snap }}
          retention-days: 5

  build-test-matrix:
    name: Build test matrix
    needs: [build-matrix, get-architectures]
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}
    steps:
      - name: Build test matrix
        id: build-matrix
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const architecturesOutput = '${{ needs.get-architectures.outputs.architectures }}';
              const samplesMatrixOutput = '${{ needs.build-matrix.outputs.samples-matrix }}';

              console.log('Raw architectures output:', architecturesOutput);
              console.log('Raw samples matrix output:', samplesMatrixOutput);

              if (!architecturesOutput || architecturesOutput === '') {
                throw new Error('Architectures output is empty');
              }

              if (!samplesMatrixOutput || samplesMatrixOutput === '') {
                throw new Error('Samples matrix output is empty');
              }

              const architectures = JSON.parse(architecturesOutput);
              let samplesMatrix;

              try {
                samplesMatrix = JSON.parse(samplesMatrixOutput);
              } catch (parseError) {
                console.error('Failed to parse samples matrix:', parseError);
                console.log('Samples matrix output type:', typeof samplesMatrixOutput);
                console.log('Samples matrix output length:', samplesMatrixOutput.length);
                throw new Error(`Failed to parse samples matrix: ${parseError.message}`);
              }

              console.log('Parsed samples matrix:', JSON.stringify(samplesMatrix, null, 2));
              console.log('Samples matrix type:', typeof samplesMatrix);
              console.log('Samples matrix has include:', 'include' in samplesMatrix);

              const matrix = {
                include: []
              };

              // Handle different possible formats of samplesMatrix
              let flavors = [];
              if (samplesMatrix && typeof samplesMatrix === 'object') {
                if (samplesMatrix.include && Array.isArray(samplesMatrix.include)) {
                  flavors = samplesMatrix.include;
                } else if (Array.isArray(samplesMatrix)) {
                  flavors = samplesMatrix;
                } else if (samplesMatrix.matrix && samplesMatrix.matrix.include && Array.isArray(samplesMatrix.matrix.include)) {
                  flavors = samplesMatrix.matrix.include;
                } else {
                  // Try to extract any array from the object
                  const keys = Object.keys(samplesMatrix);
                  console.log('Available keys in samplesMatrix:', keys);

                  for (const key of keys) {
                    if (Array.isArray(samplesMatrix[key])) {
                      console.log(`Found array at key '${key}':`, samplesMatrix[key]);
                      flavors = samplesMatrix[key];
                      break;
                    }
                  }

                  if (flavors.length === 0) {
                    console.error('No usable array found in samples matrix:', samplesMatrix);
                    // Fallback to a default test case
                    flavors = [{ id: 'iso', experimental: false }];
                    console.log('Using fallback flavors:', flavors);
                  }
                }
              } else {
                console.error('Unexpected samples matrix format:', samplesMatrix);
                // Fallback to a default test case
                flavors = [{ id: 'iso', experimental: false }];
                console.log('Using fallback flavors due to unexpected format:', flavors);
              }

              console.log('Using flavors:', JSON.stringify(flavors, null, 2));

              for (const arch of architectures) {
                for (const flavor of flavors) {
                  matrix.include.push({
                    architecture: arch,
                    id: flavor.id,
                    experimental: flavor.experimental || false
                  });
                }
              }

              console.log('Generated matrix:', JSON.stringify(matrix, null, 2));
              core.setOutput('matrix', JSON.stringify(matrix));
            } catch (error) {
              console.error('Error building test matrix:', error);
              core.setFailed(`Failed to build test matrix: ${error.message}`);
            }

  test:
    name: Test ${{ matrix.architecture }} - ${{ matrix.id }}
    needs: [build, build-test-matrix]
    runs-on: ${{ matrix.architecture == 'arm64' && 'ubuntu-latest-arm64' || 'ubuntu-latest' }}

    concurrency:
      group: '${{ github.workflow }}-${{ github.job }}-${{ matrix.architecture }}-${{ matrix.id }}-${{ github.head_ref || github.ref_name }}'
      cancel-in-progress: true

    continue-on-error: ${{ matrix.experimental }}
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix: ${{ fromJson(needs.build-test-matrix.outputs.matrix) }}

    steps:
      - run: sudo apt update && sudo apt install -y snapd

      - uses: actions/download-artifact@v4
        with:
          name: metanorma-snap-${{ matrix.architecture }}
          path: ./snap

      - run: |
          sudo snap install snap/*.snap --devmode
          sudo snap connect metanorma:home :home

      - name: Fetch samples (${{ matrix.id }})
        uses: actions/checkout@v4
        with:
          submodules: recursive
          repository: metanorma/mn-samples-${{ matrix.id }}
          token: ${{ secrets.METANORMA_CI_PAT_TOKEN }}
          fetch-depth: 1

      - uses: actions-mn/site-gen@v2
        with:
          agree-to-terms: true

  publish:
    name: Publish snap
    needs: [build, test, get-architectures]
    runs-on: ${{ matrix.architecture == 'arm64' && 'ubuntu-latest-arm64' || 'ubuntu-latest' }}
    strategy:
      matrix:
        architecture: ${{ fromJSON(needs.get-architectures.outputs.architectures) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: metanorma-snap-${{ matrix.architecture }}
          path: ./snap

      # Publish to edge and beta for main branch
      - name: Publish ${{ matrix.architecture }} to edge and beta
        if: github.ref == 'refs/heads/main'
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
        with:
          store_login: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
          snap: snap/*.snap
          release: edge,beta

      # Publish to beta and candidate for tags
      - name: Publish ${{ matrix.architecture }} to beta and candidate
        if: startsWith(github.ref, 'refs/tags/v')
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
        with:
          store_login: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
          snap: snap/*.snap
          release: beta,candidate

  promote-to-stable:
    if: startsWith(github.ref, 'refs/tags/v') && !endsWith(github.ref, 'pre')
    name: Promote to stable
    needs: [publish]
    uses: ./.github/workflows/promote-to-stable.yml
    secrets:
      METANORMA_SNAPCRAFT_TOKEN: ${{ secrets.METANORMA_SNAPCRAFT_TOKEN }}
